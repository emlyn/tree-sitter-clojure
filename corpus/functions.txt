=====================================
anonymous fn
=====================================

(fn [])

(    fn      [y]      nil     )

(fn
  ([x] x)
  ([x y] (+ x y)))

---

(program
  (anonymous_function
    (params (vector)))

  (anonymous_function
    (params (vector (symbol)))
    (function_body (nil)))

  (anonymous_function
    (params (vector (symbol)))
    (function_body (symbol))

    (params (vector (symbol) (symbol)))
    (function_body (list (symbol) (symbol) (symbol))))
  )

=====================================
anonymous fn with name
=====================================

(fn foo [])

(    fn   bar   [y]      nil     )

(fn biz
  ([x] x)
  ([x y] (+ x y)))

---

(program
  (anonymous_function
    (function_name (symbol))
    (params (vector)))

  (anonymous_function
    (function_name (symbol))
    (params (vector (symbol)))
    (function_body (nil)))

  (anonymous_function
    (function_name (symbol))

    (params (vector (symbol)))
    (function_body (symbol))

    (params (vector (symbol) (symbol)))
    (function_body (list (symbol) (symbol) (symbol))))
  )

=====================================
function shorthand
=====================================

#()

#(conj [] "a")

#(swap! % inc)

#(conj [] %1 %2 %3 %&)

---

(program
  (shorthand_function)

  (shorthand_function
    (symbol) (vector) (string))

  (shorthand_function
    (symbol) (shorthand_function_arg) (symbol))

  (shorthand_function
    (symbol)
    (vector)
    (shorthand_function_arg)
    (shorthand_function_arg)
    (shorthand_function_arg)
    (shorthand_function_arg))
  )

=====================================
defn, defn-
=====================================

(defn foo [])

(defn- foo [x] 4)

(defn foo
  ([] "zero arity")
  ([x y] "multi arity"))

---

(program
  (defn
    (function_name (symbol))
    (params (vector)))

  (defn
    (function_name (symbol))
    (params (vector (symbol)))
    (function_body (number (number_long))))

  (defn
    (function_name (symbol))

    (params (vector))
    (function_body (string))

    (params (vector (symbol) (symbol)))
    (function_body (string)))
  )

=====================================
defn with docstring and attr-map
=====================================

(defn foo "foo" [])

(defn flatten
  "Takes any nested combination of sequential things (lists, vectors,
  etc.) and returns their contents as a single, flat sequence.
  (flatten nil) returns an empty sequence."
  {:added "1.2"
   :static true}
  []
  7)

---

(program
  (defn
    (function_name (symbol))
    (docstring (string))
    (params (vector)))

  (defn
    (function_name (symbol))
    (docstring (string))
    (attr_map
      (hash_map (keyword) (string)
                (keyword) (boolean (true))))

    (params (vector))
    (function_body (number (number_long))))
  )

=====================================
defn with metadata
=====================================

(defn ^:private ^Boolean always-true
  "private function that returns a boolean value"
  []
  true)

(defn ^{:foo "bar"} always-false
  []
  false)

---

(program
  (defn
    (metadata
      (metadata_shorthand)
      (metadata_shorthand))
    (function_name (symbol))
    (docstring (string))
    (params (vector))
    (function_body
      (boolean (true))))

  (defn
    (metadata
      (hash_map (keyword) (string)))
    (function_name (symbol))
    (params (vector))
    (function_body
      (boolean (false))))
  )
