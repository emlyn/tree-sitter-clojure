=====================================
nil + booleans
=====================================

nil
true
false

---

(program
  (nil)
  (boolean (true))
  (boolean (false)))

=====================================
Numbers
=====================================

42
+1
-5
+0

4.23e9
4.23e-9
4.23e+9
40.3e6
40.3e-6
1.234
0.123456
.12345
1e4
0.2e-2
0.0e-4
.2e-2

---

(program
  (number (number_long))
  (number (number_long))
  (number (number_long))
  (number (number_long))

  (number (number_double))
  (number (number_double))
  (number (number_double))
  (number (number_double))
  (number (number_double))
  (number (number_double))
  (number (number_double))
  (number (number_double))
  (number (number_double))
  (number (number_double))
  (number (number_double))
  (number (number_double)))

=====================================
Characters - \a
=====================================

\a
\b
\Z
\}

\newline
\space
\tab
\formfeed
\backspace
\return

\u2202
\u03a9
\u00A1

\o3
\o41
\o256

---

(program
  (character)
  (character)
  (character)
  (character)

  (character)
  (character)
  (character)
  (character)
  (character)
  (character)

  (character)
  (character)
  (character)

  (character)
  (character)
  (character))

=====================================
Strings - ""
=====================================

""
"\""
"abc"
"'"
"i am a multi-line
 string\""

---

(program
  (string)
  (string)
  (string)
  (string)
  (string)
  )

=====================================
Regular Expressions - #""
=====================================

#""
#"\""
#"pattern"
#"(\w+)\s(\w+)"

---

(program
  (regex)
  (regex)
  (regex)
  (regex))

=====================================
Quote - '() (quote)
=====================================

'()
'"a"
'("a" "b" "c")

(quote ())
(quote "a")
(quote ("a" "b" "c"))

---

(program
  (quote (list))
  (quote (string))
  (quote (list (string) (string) (string)))

  (quote (list))
  (quote (string))
  (quote (list (string) (string) (string)))
  )

=====================================
Keywords - :foo
=====================================

:a
:foo
:rubber-baby-buggy-bumper!
:j3_!:7
:HELICOPTER
:+fiduciary+

::foo

---

(program
  (keyword (unqualified_keyword))
  (keyword (unqualified_keyword))
  (keyword (unqualified_keyword))
  (keyword (unqualified_keyword))
  (keyword (unqualified_keyword))
  (keyword (unqualified_keyword))

  (keyword (qualified_keyword))
  )

=====================================
List - ()
=====================================

()
("a" "b" "c")
(:a {:a "a"})

---

(program
  (list)
  (list (string) (string) (string))
  (list (keyword (unqualified_keyword))
        (hash_map (hash_map_kv_pair (hash_map_key (keyword (unqualified_keyword)))
                                    (hash_map_value (string))))))

=====================================
Vector - []
=====================================

[]
[true]
["a" :b 3]

---

(program
  (vector)
  (vector (boolean (true)))
  (vector (string) (keyword (unqualified_keyword)) (number (number_long))))

=====================================
Hash Map - {}
=====================================

{}
{"a" :a}
{"x" :x, "y" :y, "z" :z}

---

(program
  (hash_map)
  (hash_map (hash_map_kv_pair (hash_map_key (string))
                              (hash_map_value (keyword (unqualified_keyword)))))
  (hash_map (hash_map_kv_pair (hash_map_key (string))
                              (hash_map_value (keyword (unqualified_keyword))))
            (hash_map_kv_pair (hash_map_key (string))
                              (hash_map_value (keyword (unqualified_keyword))))
            (hash_map_kv_pair (hash_map_key (string))
                              (hash_map_value (keyword (unqualified_keyword))))))

=====================================
Sets - #{}
=====================================

#{}
#{true}
#{true false}
#{"a", "b", nil}

---

(program
  (set)
  (set (boolean (true)))
  (set (boolean (true)) (boolean (false)))
  (set (string) (string) (nil)))

=====================================
Comments - #! ; #_
=====================================

#!/usr/bin/env
#! #{} :foo

; foo
;; foo

#_["a" "b"]
#_ #{"a" "b"}
["a" "b" #_:z "d"]
["a" "b" #_ #{} "d"]

---

(program
  (comment (shebang_line))
  (comment (shebang_line))

  (comment (semicolon))
  (comment (semicolon))

  (comment (ignore_form (vector (string) (string))))
  (comment (ignore_form (set (string) (string))))
  (vector (string)
          (string)
          (comment (ignore_form (keyword (unqualified_keyword))))
          (string))
  (vector (string)
          (string)
          (comment (ignore_form (set)))
          (string))
  )

=====================================
Comments - comment macro
=====================================

(comment)
(comment "foo")
(comment ["a" "b"] "foo")
["a" (comment "b") "c"]

---

(program
  (comment (comment_macro))
  (comment (comment_macro (string)))
  (comment (comment_macro (vector (string) (string)) (string)))
  (vector (string) (comment (comment_macro (string))) (string))
  )
